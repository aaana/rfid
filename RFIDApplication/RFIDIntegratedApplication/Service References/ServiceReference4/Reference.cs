//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RFIDIntegratedApplication.ServiceReference4 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignalIn", Namespace="http://schemas.datacontract.org/2004/07/VitalSignsServer")]
    [System.SerializableAttribute()]
    public partial class SignalIn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] epcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] frequencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] phaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] timestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] epc {
            get {
                return this.epcField;
            }
            set {
                if ((object.ReferenceEquals(this.epcField, value) != true)) {
                    this.epcField = value;
                    this.RaisePropertyChanged("epc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] frequency {
            get {
                return this.frequencyField;
            }
            set {
                if ((object.ReferenceEquals(this.frequencyField, value) != true)) {
                    this.frequencyField = value;
                    this.RaisePropertyChanged("frequency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] phase {
            get {
                return this.phaseField;
            }
            set {
                if ((object.ReferenceEquals(this.phaseField, value) != true)) {
                    this.phaseField = value;
                    this.RaisePropertyChanged("phase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] timestamp {
            get {
                return this.timestampField;
            }
            set {
                if ((object.ReferenceEquals(this.timestampField, value) != true)) {
                    this.timestampField = value;
                    this.RaisePropertyChanged("timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FrequencyInfo", Namespace="http://schemas.datacontract.org/2004/07/VitalSignsServer")]
    [System.SerializableAttribute()]
    public partial class FrequencyInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] breathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int failField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] heartbeatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double meanBreathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double meanHeartbeatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] tField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] breath {
            get {
                return this.breathField;
            }
            set {
                if ((object.ReferenceEquals(this.breathField, value) != true)) {
                    this.breathField = value;
                    this.RaisePropertyChanged("breath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fail {
            get {
                return this.failField;
            }
            set {
                if ((this.failField.Equals(value) != true)) {
                    this.failField = value;
                    this.RaisePropertyChanged("fail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] heartbeat {
            get {
                return this.heartbeatField;
            }
            set {
                if ((object.ReferenceEquals(this.heartbeatField, value) != true)) {
                    this.heartbeatField = value;
                    this.RaisePropertyChanged("heartbeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double meanBreath {
            get {
                return this.meanBreathField;
            }
            set {
                if ((this.meanBreathField.Equals(value) != true)) {
                    this.meanBreathField = value;
                    this.RaisePropertyChanged("meanBreath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double meanHeartbeat {
            get {
                return this.meanHeartbeatField;
            }
            set {
                if ((this.meanHeartbeatField.Equals(value) != true)) {
                    this.meanHeartbeatField = value;
                    this.RaisePropertyChanged("meanHeartbeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] t {
            get {
                return this.tField;
            }
            set {
                if ((object.ReferenceEquals(this.tField, value) != true)) {
                    this.tField = value;
                    this.RaisePropertyChanged("t");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference4.IVitalSignsService")]
    public interface IVitalSignsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/realtimeAnalyze", ReplyAction="http://tempuri.org/IVitalSignsService/realtimeAnalyzeResponse")]
<<<<<<< HEAD
        RFIDIntegratedApplication.ServiceReference4.FrequencyInfo realtimeAnalyze();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/realtimeAnalyze", ReplyAction="http://tempuri.org/IVitalSignsService/realtimeAnalyzeResponse")]
        System.Threading.Tasks.Task<RFIDIntegratedApplication.ServiceReference4.FrequencyInfo> realtimeAnalyzeAsync();
=======
        void realtimeAnalyze(RFIDIntegratedApplication.ServiceReference4.SignalIn signalIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/realtimeAnalyze", ReplyAction="http://tempuri.org/IVitalSignsService/realtimeAnalyzeResponse")]
        System.Threading.Tasks.Task realtimeAnalyzeAsync(RFIDIntegratedApplication.ServiceReference4.SignalIn signalIn);
>>>>>>> b8eca286e13f01e4d391b9f6971d8a0ac7bfe2a0
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/offlineAnalyze", ReplyAction="http://tempuri.org/IVitalSignsService/offlineAnalyzeResponse")]
        RFIDIntegratedApplication.ServiceReference4.FrequencyInfo offlineAnalyze(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/offlineAnalyze", ReplyAction="http://tempuri.org/IVitalSignsService/offlineAnalyzeResponse")]
        System.Threading.Tasks.Task<RFIDIntegratedApplication.ServiceReference4.FrequencyInfo> offlineAnalyzeAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/addTagInfo", ReplyAction="http://tempuri.org/IVitalSignsService/addTagInfoResponse")]
        void addTagInfo(long timestamp, double phase, int frequency, string epc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/addTagInfo", ReplyAction="http://tempuri.org/IVitalSignsService/addTagInfoResponse")]
        System.Threading.Tasks.Task addTagInfoAsync(long timestamp, double phase, int frequency, string epc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/removeHead", ReplyAction="http://tempuri.org/IVitalSignsService/removeHeadResponse")]
        void removeHead();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/removeHead", ReplyAction="http://tempuri.org/IVitalSignsService/removeHeadResponse")]
        System.Threading.Tasks.Task removeHeadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/cleanBuffer", ReplyAction="http://tempuri.org/IVitalSignsService/cleanBufferResponse")]
        void cleanBuffer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVitalSignsService/cleanBuffer", ReplyAction="http://tempuri.org/IVitalSignsService/cleanBufferResponse")]
        System.Threading.Tasks.Task cleanBufferAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVitalSignsServiceChannel : RFIDIntegratedApplication.ServiceReference4.IVitalSignsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VitalSignsServiceClient : System.ServiceModel.ClientBase<RFIDIntegratedApplication.ServiceReference4.IVitalSignsService>, RFIDIntegratedApplication.ServiceReference4.IVitalSignsService {
        
        public VitalSignsServiceClient() {
        }
        
        public VitalSignsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VitalSignsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VitalSignsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VitalSignsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
<<<<<<< HEAD
        public RFIDIntegratedApplication.ServiceReference4.FrequencyInfo realtimeAnalyze() {
            return base.Channel.realtimeAnalyze();
        }
        
        public System.Threading.Tasks.Task<RFIDIntegratedApplication.ServiceReference4.FrequencyInfo> realtimeAnalyzeAsync() {
            return base.Channel.realtimeAnalyzeAsync();
=======
        public void realtimeAnalyze(RFIDIntegratedApplication.ServiceReference4.SignalIn signalIn) {
            base.Channel.realtimeAnalyze(signalIn);
        }
        
        public System.Threading.Tasks.Task realtimeAnalyzeAsync(RFIDIntegratedApplication.ServiceReference4.SignalIn signalIn) {
            return base.Channel.realtimeAnalyzeAsync(signalIn);
>>>>>>> b8eca286e13f01e4d391b9f6971d8a0ac7bfe2a0
        }
        
        public RFIDIntegratedApplication.ServiceReference4.FrequencyInfo offlineAnalyze(string fileName) {
            return base.Channel.offlineAnalyze(fileName);
        }
        
        public System.Threading.Tasks.Task<RFIDIntegratedApplication.ServiceReference4.FrequencyInfo> offlineAnalyzeAsync(string fileName) {
            return base.Channel.offlineAnalyzeAsync(fileName);
        }
        
        public void addTagInfo(long timestamp, double phase, int frequency, string epc) {
            base.Channel.addTagInfo(timestamp, phase, frequency, epc);
        }
        
        public System.Threading.Tasks.Task addTagInfoAsync(long timestamp, double phase, int frequency, string epc) {
            return base.Channel.addTagInfoAsync(timestamp, phase, frequency, epc);
        }
        
        public void removeHead() {
            base.Channel.removeHead();
        }
        
        public System.Threading.Tasks.Task removeHeadAsync() {
            return base.Channel.removeHeadAsync();
        }
        
        public void cleanBuffer() {
            base.Channel.cleanBuffer();
        }
        
        public System.Threading.Tasks.Task cleanBufferAsync() {
            return base.Channel.cleanBufferAsync();
        }
    }
}
